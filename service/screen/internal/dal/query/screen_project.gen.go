// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ch3nnn/goview-gozero/service/screen/internal/dal/model"
)

func newScreenProject(db *gorm.DB, opts ...gen.DOOption) screenProject {
	_screenProject := screenProject{}

	_screenProject.screenProjectDo.UseDB(db, opts...)
	_screenProject.screenProjectDo.UseModel(&model.ScreenProject{})

	tableName := _screenProject.screenProjectDo.TableName()
	_screenProject.ALL = field.NewAsterisk(tableName)
	_screenProject.ID = field.NewInt64(tableName, "id")
	_screenProject.Name = field.NewString(tableName, "name")
	_screenProject.State = field.NewInt64(tableName, "state")
	_screenProject.UserID = field.NewInt64(tableName, "user_id")
	_screenProject.IndexImg = field.NewString(tableName, "index_img")
	_screenProject.Remark = field.NewString(tableName, "remark")
	_screenProject.IsDel = field.NewField(tableName, "is_del")
	_screenProject.CreateAt = field.NewTime(tableName, "create_at")

	_screenProject.fillFieldMap()

	return _screenProject
}

// screenProject 大屏信息
type screenProject struct {
	screenProjectDo screenProjectDo

	ALL      field.Asterisk
	ID       field.Int64  // ID
	Name     field.String // 大屏名称
	State    field.Int64  // 发布状态(-1 未发布  1 已发布)
	UserID   field.Int64  // 创建用户ID
	IndexImg field.String // 缩略图
	Remark   field.String // 备注
	IsDel    field.Field  //  是否删除(0 未删除 1 已删除)
	CreateAt field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (s screenProject) Table(newTableName string) *screenProject {
	s.screenProjectDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s screenProject) As(alias string) *screenProject {
	s.screenProjectDo.DO = *(s.screenProjectDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *screenProject) updateTableName(table string) *screenProject {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.State = field.NewInt64(table, "state")
	s.UserID = field.NewInt64(table, "user_id")
	s.IndexImg = field.NewString(table, "index_img")
	s.Remark = field.NewString(table, "remark")
	s.IsDel = field.NewField(table, "is_del")
	s.CreateAt = field.NewTime(table, "create_at")

	s.fillFieldMap()

	return s
}

func (s *screenProject) WithContext(ctx context.Context) IScreenProjectDo {
	return s.screenProjectDo.WithContext(ctx)
}

func (s screenProject) TableName() string { return s.screenProjectDo.TableName() }

func (s screenProject) Alias() string { return s.screenProjectDo.Alias() }

func (s screenProject) Columns(cols ...field.Expr) gen.Columns {
	return s.screenProjectDo.Columns(cols...)
}

func (s *screenProject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *screenProject) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["state"] = s.State
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["index_img"] = s.IndexImg
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["is_del"] = s.IsDel
	s.fieldMap["create_at"] = s.CreateAt
}

func (s screenProject) clone(db *gorm.DB) screenProject {
	s.screenProjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s screenProject) replaceDB(db *gorm.DB) screenProject {
	s.screenProjectDo.ReplaceDB(db)
	return s
}

type screenProjectDo struct{ gen.DO }

type IScreenProjectDo interface {
	gen.SubQuery
	Debug() IScreenProjectDo
	WithContext(ctx context.Context) IScreenProjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScreenProjectDo
	WriteDB() IScreenProjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScreenProjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScreenProjectDo
	Not(conds ...gen.Condition) IScreenProjectDo
	Or(conds ...gen.Condition) IScreenProjectDo
	Select(conds ...field.Expr) IScreenProjectDo
	Where(conds ...gen.Condition) IScreenProjectDo
	Order(conds ...field.Expr) IScreenProjectDo
	Distinct(cols ...field.Expr) IScreenProjectDo
	Omit(cols ...field.Expr) IScreenProjectDo
	Join(table schema.Tabler, on ...field.Expr) IScreenProjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScreenProjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScreenProjectDo
	Group(cols ...field.Expr) IScreenProjectDo
	Having(conds ...gen.Condition) IScreenProjectDo
	Limit(limit int) IScreenProjectDo
	Offset(offset int) IScreenProjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScreenProjectDo
	Unscoped() IScreenProjectDo
	Create(values ...*model.ScreenProject) error
	CreateInBatches(values []*model.ScreenProject, batchSize int) error
	Save(values ...*model.ScreenProject) error
	First() (*model.ScreenProject, error)
	Take() (*model.ScreenProject, error)
	Last() (*model.ScreenProject, error)
	Find() ([]*model.ScreenProject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScreenProject, err error)
	FindInBatches(result *[]*model.ScreenProject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScreenProject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScreenProjectDo
	Assign(attrs ...field.AssignExpr) IScreenProjectDo
	Joins(fields ...field.RelationField) IScreenProjectDo
	Preload(fields ...field.RelationField) IScreenProjectDo
	FirstOrInit() (*model.ScreenProject, error)
	FirstOrCreate() (*model.ScreenProject, error)
	FindByPage(offset int, limit int) (result []*model.ScreenProject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScreenProjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s screenProjectDo) Debug() IScreenProjectDo {
	return s.withDO(s.DO.Debug())
}

func (s screenProjectDo) WithContext(ctx context.Context) IScreenProjectDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s screenProjectDo) ReadDB() IScreenProjectDo {
	return s.Clauses(dbresolver.Read)
}

func (s screenProjectDo) WriteDB() IScreenProjectDo {
	return s.Clauses(dbresolver.Write)
}

func (s screenProjectDo) Session(config *gorm.Session) IScreenProjectDo {
	return s.withDO(s.DO.Session(config))
}

func (s screenProjectDo) Clauses(conds ...clause.Expression) IScreenProjectDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s screenProjectDo) Returning(value interface{}, columns ...string) IScreenProjectDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s screenProjectDo) Not(conds ...gen.Condition) IScreenProjectDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s screenProjectDo) Or(conds ...gen.Condition) IScreenProjectDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s screenProjectDo) Select(conds ...field.Expr) IScreenProjectDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s screenProjectDo) Where(conds ...gen.Condition) IScreenProjectDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s screenProjectDo) Order(conds ...field.Expr) IScreenProjectDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s screenProjectDo) Distinct(cols ...field.Expr) IScreenProjectDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s screenProjectDo) Omit(cols ...field.Expr) IScreenProjectDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s screenProjectDo) Join(table schema.Tabler, on ...field.Expr) IScreenProjectDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s screenProjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScreenProjectDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s screenProjectDo) RightJoin(table schema.Tabler, on ...field.Expr) IScreenProjectDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s screenProjectDo) Group(cols ...field.Expr) IScreenProjectDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s screenProjectDo) Having(conds ...gen.Condition) IScreenProjectDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s screenProjectDo) Limit(limit int) IScreenProjectDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s screenProjectDo) Offset(offset int) IScreenProjectDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s screenProjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScreenProjectDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s screenProjectDo) Unscoped() IScreenProjectDo {
	return s.withDO(s.DO.Unscoped())
}

func (s screenProjectDo) Create(values ...*model.ScreenProject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s screenProjectDo) CreateInBatches(values []*model.ScreenProject, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s screenProjectDo) Save(values ...*model.ScreenProject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s screenProjectDo) First() (*model.ScreenProject, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenProject), nil
	}
}

func (s screenProjectDo) Take() (*model.ScreenProject, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenProject), nil
	}
}

func (s screenProjectDo) Last() (*model.ScreenProject, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenProject), nil
	}
}

func (s screenProjectDo) Find() ([]*model.ScreenProject, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScreenProject), err
}

func (s screenProjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScreenProject, err error) {
	buf := make([]*model.ScreenProject, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s screenProjectDo) FindInBatches(result *[]*model.ScreenProject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s screenProjectDo) Attrs(attrs ...field.AssignExpr) IScreenProjectDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s screenProjectDo) Assign(attrs ...field.AssignExpr) IScreenProjectDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s screenProjectDo) Joins(fields ...field.RelationField) IScreenProjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s screenProjectDo) Preload(fields ...field.RelationField) IScreenProjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s screenProjectDo) FirstOrInit() (*model.ScreenProject, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenProject), nil
	}
}

func (s screenProjectDo) FirstOrCreate() (*model.ScreenProject, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenProject), nil
	}
}

func (s screenProjectDo) FindByPage(offset int, limit int) (result []*model.ScreenProject, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s screenProjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s screenProjectDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s screenProjectDo) Delete(models ...*model.ScreenProject) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *screenProjectDo) withDO(do gen.Dao) *screenProjectDo {
	s.DO = *do.(*gen.DO)
	return s
}
