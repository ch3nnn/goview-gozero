// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ch3nnn/goview-gozero/service/screen/internal/dal/model"
)

func newScreenDatum(db *gorm.DB, opts ...gen.DOOption) screenDatum {
	_screenDatum := screenDatum{}

	_screenDatum.screenDatumDo.UseDB(db, opts...)
	_screenDatum.screenDatumDo.UseModel(&model.ScreenDatum{})

	tableName := _screenDatum.screenDatumDo.TableName()
	_screenDatum.ALL = field.NewAsterisk(tableName)
	_screenDatum.ID = field.NewInt64(tableName, "id")
	_screenDatum.ProjectID = field.NewInt64(tableName, "project_id")
	_screenDatum.UserID = field.NewInt64(tableName, "user_id")
	_screenDatum.Content = field.NewString(tableName, "content")
	_screenDatum.CreateAt = field.NewTime(tableName, "create_at")

	_screenDatum.fillFieldMap()

	return _screenDatum
}

// screenDatum 大屏数据
type screenDatum struct {
	screenDatumDo screenDatumDo

	ALL       field.Asterisk
	ID        field.Int64  // ID
	ProjectID field.Int64  // project ID
	UserID    field.Int64  // 用户 ID
	Content   field.String // 内容数据
	CreateAt  field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (s screenDatum) Table(newTableName string) *screenDatum {
	s.screenDatumDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s screenDatum) As(alias string) *screenDatum {
	s.screenDatumDo.DO = *(s.screenDatumDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *screenDatum) updateTableName(table string) *screenDatum {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ProjectID = field.NewInt64(table, "project_id")
	s.UserID = field.NewInt64(table, "user_id")
	s.Content = field.NewString(table, "content")
	s.CreateAt = field.NewTime(table, "create_at")

	s.fillFieldMap()

	return s
}

func (s *screenDatum) WithContext(ctx context.Context) IScreenDatumDo {
	return s.screenDatumDo.WithContext(ctx)
}

func (s screenDatum) TableName() string { return s.screenDatumDo.TableName() }

func (s screenDatum) Alias() string { return s.screenDatumDo.Alias() }

func (s screenDatum) Columns(cols ...field.Expr) gen.Columns { return s.screenDatumDo.Columns(cols...) }

func (s *screenDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *screenDatum) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["project_id"] = s.ProjectID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["content"] = s.Content
	s.fieldMap["create_at"] = s.CreateAt
}

func (s screenDatum) clone(db *gorm.DB) screenDatum {
	s.screenDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s screenDatum) replaceDB(db *gorm.DB) screenDatum {
	s.screenDatumDo.ReplaceDB(db)
	return s
}

type screenDatumDo struct{ gen.DO }

type IScreenDatumDo interface {
	gen.SubQuery
	Debug() IScreenDatumDo
	WithContext(ctx context.Context) IScreenDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScreenDatumDo
	WriteDB() IScreenDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScreenDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScreenDatumDo
	Not(conds ...gen.Condition) IScreenDatumDo
	Or(conds ...gen.Condition) IScreenDatumDo
	Select(conds ...field.Expr) IScreenDatumDo
	Where(conds ...gen.Condition) IScreenDatumDo
	Order(conds ...field.Expr) IScreenDatumDo
	Distinct(cols ...field.Expr) IScreenDatumDo
	Omit(cols ...field.Expr) IScreenDatumDo
	Join(table schema.Tabler, on ...field.Expr) IScreenDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScreenDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScreenDatumDo
	Group(cols ...field.Expr) IScreenDatumDo
	Having(conds ...gen.Condition) IScreenDatumDo
	Limit(limit int) IScreenDatumDo
	Offset(offset int) IScreenDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScreenDatumDo
	Unscoped() IScreenDatumDo
	Create(values ...*model.ScreenDatum) error
	CreateInBatches(values []*model.ScreenDatum, batchSize int) error
	Save(values ...*model.ScreenDatum) error
	First() (*model.ScreenDatum, error)
	Take() (*model.ScreenDatum, error)
	Last() (*model.ScreenDatum, error)
	Find() ([]*model.ScreenDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScreenDatum, err error)
	FindInBatches(result *[]*model.ScreenDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScreenDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScreenDatumDo
	Assign(attrs ...field.AssignExpr) IScreenDatumDo
	Joins(fields ...field.RelationField) IScreenDatumDo
	Preload(fields ...field.RelationField) IScreenDatumDo
	FirstOrInit() (*model.ScreenDatum, error)
	FirstOrCreate() (*model.ScreenDatum, error)
	FindByPage(offset int, limit int) (result []*model.ScreenDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScreenDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s screenDatumDo) Debug() IScreenDatumDo {
	return s.withDO(s.DO.Debug())
}

func (s screenDatumDo) WithContext(ctx context.Context) IScreenDatumDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s screenDatumDo) ReadDB() IScreenDatumDo {
	return s.Clauses(dbresolver.Read)
}

func (s screenDatumDo) WriteDB() IScreenDatumDo {
	return s.Clauses(dbresolver.Write)
}

func (s screenDatumDo) Session(config *gorm.Session) IScreenDatumDo {
	return s.withDO(s.DO.Session(config))
}

func (s screenDatumDo) Clauses(conds ...clause.Expression) IScreenDatumDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s screenDatumDo) Returning(value interface{}, columns ...string) IScreenDatumDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s screenDatumDo) Not(conds ...gen.Condition) IScreenDatumDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s screenDatumDo) Or(conds ...gen.Condition) IScreenDatumDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s screenDatumDo) Select(conds ...field.Expr) IScreenDatumDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s screenDatumDo) Where(conds ...gen.Condition) IScreenDatumDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s screenDatumDo) Order(conds ...field.Expr) IScreenDatumDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s screenDatumDo) Distinct(cols ...field.Expr) IScreenDatumDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s screenDatumDo) Omit(cols ...field.Expr) IScreenDatumDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s screenDatumDo) Join(table schema.Tabler, on ...field.Expr) IScreenDatumDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s screenDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScreenDatumDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s screenDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IScreenDatumDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s screenDatumDo) Group(cols ...field.Expr) IScreenDatumDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s screenDatumDo) Having(conds ...gen.Condition) IScreenDatumDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s screenDatumDo) Limit(limit int) IScreenDatumDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s screenDatumDo) Offset(offset int) IScreenDatumDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s screenDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScreenDatumDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s screenDatumDo) Unscoped() IScreenDatumDo {
	return s.withDO(s.DO.Unscoped())
}

func (s screenDatumDo) Create(values ...*model.ScreenDatum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s screenDatumDo) CreateInBatches(values []*model.ScreenDatum, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s screenDatumDo) Save(values ...*model.ScreenDatum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s screenDatumDo) First() (*model.ScreenDatum, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenDatum), nil
	}
}

func (s screenDatumDo) Take() (*model.ScreenDatum, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenDatum), nil
	}
}

func (s screenDatumDo) Last() (*model.ScreenDatum, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenDatum), nil
	}
}

func (s screenDatumDo) Find() ([]*model.ScreenDatum, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScreenDatum), err
}

func (s screenDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScreenDatum, err error) {
	buf := make([]*model.ScreenDatum, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s screenDatumDo) FindInBatches(result *[]*model.ScreenDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s screenDatumDo) Attrs(attrs ...field.AssignExpr) IScreenDatumDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s screenDatumDo) Assign(attrs ...field.AssignExpr) IScreenDatumDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s screenDatumDo) Joins(fields ...field.RelationField) IScreenDatumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s screenDatumDo) Preload(fields ...field.RelationField) IScreenDatumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s screenDatumDo) FirstOrInit() (*model.ScreenDatum, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenDatum), nil
	}
}

func (s screenDatumDo) FirstOrCreate() (*model.ScreenDatum, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenDatum), nil
	}
}

func (s screenDatumDo) FindByPage(offset int, limit int) (result []*model.ScreenDatum, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s screenDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s screenDatumDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s screenDatumDo) Delete(models ...*model.ScreenDatum) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *screenDatumDo) withDO(do gen.Dao) *screenDatumDo {
	s.DO = *do.(*gen.DO)
	return s
}
